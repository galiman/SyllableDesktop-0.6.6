ORCA [
	Title:		"Package installation library"
	Version:	0.5.0
	Author:		"Kaj de Vos"
	Rights: {
		Copyright (c) 2006-2008 Kaj de Vos
		License: LGPL
	}
	Purpose:	"Registers and unregisters (binary) packages by managing pools of symbolic links."
	Example:	"do %/system/indexes/lib/REBOL/package.library"

	Tabs:		4
]

log: context [  ; Singleton logger object
	open: func [] [
	]
	close: does [
	]

	header: func [header] [
		prin newline
		print header
	]
	detail: func [detail] [
;		print detail
	]
	action: func [action] [
;		prin newline
;		print action
;		prin newline
	]
	output: func [output] [
	]
	error: func [error] [
		prin newline
		print ["Error:" error]
	]
	warning: func [warning] [
		prin newline
		print ["Warning:" warning]
	]
	failure: func [module] [
		prin newline
		print ["Package" module "failed!"]
	]
]

action: func ["Returns the output of a shell command, or false if unsuccessful."
	command "Shell command."
	/local status stdout
][
	log/action command

	either (status: call/wait/output command stdout: "") = 0 [
;		FIXME: ORCA call/output bug:
		log/output stdout
		stdout
	][
		log/error status
		log/output stdout
		no
	]
]

build: context [
	system?: no
]

stage-proto: context [
	image?: none
	packages: %/resources/
	indexes: %/resources/indexes
	
	new: func ["Returns a new stage object; by default of the running system."
		packages' [file! string! none!]  ; "Trailing slash required."
		indexes' [file! string! none!]
	][
		make self [
			indexes: to-file any [indexes' indexes]
			packages: to-string any [packages' packages]
			if image?: to-logic find indexes "/stage/image/"
;				ORCA FIXME: FIND works in indexes but only in packages as string?
;				ORCA TODO: implement find/tail:
				[packages: at find packages "/stage/image/" 13]
			packages: to-file packages
		]
	]

	index-node: func [package node
		/local source target index
	][
		source: join package/root index: join package/name ["/" node]
		target: join indexes ["/" node]

		either all [exists? source  dir? source] [
			either exists? target [
;				TODO: detect a symlink:
;				if symlink? target [log/warning join "directory " [target " is a link"]]
				yes
			][
;				if dir? target [log/warning join "replacing broken directory link " target]
				action join "mkdir " target
			]
		][
			either node = "info/dir" and exists? target [
				log/warning "info/dir file not registered due to pre-existing file"
				yes
			][
				either exists? target [
					log/warning join "conflict: replacing " target
				][
;					TODO: detect a symlink:
;					if file? target [log/warning join "replacing broken link " target]
				]
;				change-dir join indexes ["/" subdir]
				action join "ln --symbolic --force " [
					either image? [join packages index] [source]
					" " target
				]
			]
		]
	]
	
	remove-node: func [subdir file
		/local node index
	][
		index: join indexes ["/"  node: join subdir ["/" file]]

;		TODO: detect a symlink:
		either all [exists? index  dir? index] [
			any [
;				FIXME: bug in ORCA list comparison:
;				(read index) <> []  ; Indexes directory not empty?
				(length? read index) > 0  ; Indexes directory not empty?
;				action join "rmdir " index
				; May be a symlink from old package manager:
				action join "rm --recursive " index
			]
		][
;			TODO: detect a symlink:
;			either file? file [
			either image? or exists? index [
				either node = "info/dir" [
					log/warning "info/dir file left untouched"
					yes
				][
					action join "rm " index
					yes  ; Don't consider an error fatal for now
				]
			][
				log/warning join "link " [index " did not exist"]
				yes
			]
		]
	]
]

resources-stage: stage-proto/new none none

package-image: context [
	name: root: path: this-stage: none

	flat-dirs:	 [etc bin sbin info early-init init]
	nested-dirs: [lib libexec include share man]

	new: func ["Returns a new package image object."
		package' [string! file!]  ; "Name or full path."
		/stage stage' [object!]  ; "Defaults to the host system."
		/local where
	][
		unless stage [stage': resources-stage]
		; Drop any trailing slash:
		if (last package') = #"/" [package': copy/part package' back tail package']

		either where: find/last package': to-file package'  #"/" [  ; Package path given?
			make self [
;				FIXME: ORCA bug?: 'where is cleaned up if not copied:
				name: to-string next where
				root: copy/part package' next where
				path: package'
				this-stage: stage'
			]
		][
			make self [
				name: to-string package'
				root: resources-stage/packages
				path: join root package'
				this-stage: stage'
			]
		]
	]

	register: func ["Indexes the package into the staging areas."
		/stages targets [block!]
		/local manuals
	][
		log/header join "Registering " path

		either all [
			do-subdirs :index-subdir either stages [targets] [reduce [this-stage]]
			any [
				not exists? manuals: join path "/man"
				(
					log/header "Generating manual pages"
;					FIXME: staged manuals are linked into the host system:
					action join "manmanager -a " manuals
				)
			]
		][
			action "sync"
		][
			log/failure path
			no
		]
	]

	unregister: func ["Unlinks the package from the staging areas."
		/stages targets [block!]
		/local manuals
	][
		log/header join "Unregistering " path

		either all [
			do-subdirs :remove-subdir either stages [targets] [reduce [this-stage]]
			any [
				root <> resources-stage/packages  ; Don't remove staged manuals from a host system
				not exists? manuals: join path "/man"
				(
					log/header "Deleting manual pages"
;					FIXME: manmanager fails on deleting non-existing manuals?
					action join "manmanager -r " manuals
				)
			]
		][
			action "sync"
		][
			log/failure path
			no
		]
	]


	do-subdirs: func [task stages
		/local subdir
	][
		foreach subdir flat-dirs [
;			FIXME: ORCA bug: errors don't propagate from 'task:
			unless task stages subdir no
				[return no]
		]
		foreach subdir nested-dirs [
			unless task stages subdir yes
				[return no]
		]
		yes
	]
	
	index-subdir: func [stages subdir nesting?
		/local dir entry node s
	][
		any [
			not exists? dir: join path ["/" subdir]
			(
				log/detail join "Processing subdirectory " subdir
				change-dir dir

				foreach entry read %. [
					unless (last entry) = #"~" [  ; Skip backup files
						node: join subdir ["/" entry]
						foreach s stages [
							unless s/index-node self node
								[return no]
						]
						if all [nesting?  exists? entry  dir? entry] [
							unless index-subdir stages node yes
								[return no]
							change-dir dir
						]
					]
				]
				yes
			)
		]
	]
	
	remove-subdir: func [stages subdir nesting?
		/local dir entry s
	][
		any [
			not exists? dir: join path ["/" subdir]
			(
				log/detail join "Processing subdirectory " subdir
				change-dir dir

				foreach entry read %. [
					unless (last entry) = #"~" [  ; Skip backup files
						if all [nesting?  exists? entry  dir? entry] [
							unless remove-subdir stages  join subdir ["/" entry]  yes
								[return no]
						]
						foreach s stages [
							unless s/remove-node subdir entry
								[return no]
						]
						change-dir dir
					]
				]
				yes
			)
		]
	]
]
